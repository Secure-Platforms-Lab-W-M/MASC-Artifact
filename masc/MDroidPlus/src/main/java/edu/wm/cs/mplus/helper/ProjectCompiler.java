/**
 * MuDroidProjectCloner.java
 * 
 * Created on Aug 7, 2016, 8:33:32 PM
 * 
 */
package edu.wm.cs.mplus.helper;

import java.io.BufferedReader;
import java.io.File;
import java.io.IOException;
import java.io.InputStreamReader;


/**
 * {Insert class description here}
 *
 * @author Kevin Moran
 * @since Aug 7, 2016
 */
public class ProjectCompiler {

	/**
	 * @author Kevin Moran
	 * Description: Main method for testing.
	 * @param args
	 */
	public static void main(String[] args){
		
		String[] projectCommits = {"26d3a14",
				"4bc2395",
				"5977898",
				"cc62831"};
		String baseRepoLocation = "/Volumes/Macintosh_HD_2/Research_Large_Files/MuDroid_Projects/Tasks/Tasks-Base/";
		String cloneLocation = "/Volumes/Macintosh_HD_2/Research_Large_Files/MuDroid_Projects/Tasks/Tasks-Clones/";
		String androidSDKPath = "/Volumes/Macintosh_HD_3/AndroidSDK/sdk";
		String gradlePath = "/usr/local/Cellar/gradle/2.12/bin";
		String gradleBuildFile = "/Users/kevinmoran/Desktop/build.gradle";
		String antPath = "/Users/kevinmoran/apache-ant-1.9.3/";
		
		cloneProjectCommits(projectCommits, baseRepoLocation, cloneLocation);
		
	}
	
	/**
	 * @author Kevin Moran
	 * Description: This method will copy a project which has been cloned from a Git repo and 
	 * create several copies of the project at a list of commits.
	 * 
	 * @param projectCommits
	 * @param baseRepoLocation
	 * @param cloneLocation
	 */
	public static void cloneProjectCommits(String[] projectCommits, String baseRepoLocation, String cloneLocation){
		
		for(String currentCommit:projectCommits){ // For loop to process the commits to be cloned
		
		String newRepoLocation = cloneLocation + currentCommit;
		
		String copyRepoCommand = "cp -R " + baseRepoLocation + " " + newRepoLocation;
		
		System.out.println(executeCommand(copyRepoCommand));
		
		String checkoutCommand = "git -C " + newRepoLocation + " checkout " + currentCommit;
		
		System.out.println(executeCommand(checkoutCommand));
		
//		String gitSubModuleUpdate = "git -C " + newRepoLocation + " submodule update --init --recursive";
//		System.out.println(TerminalHelper.executeCommand(gitSubModuleUpdate));
		
		}
		
	}
	
	/**
	 * @author Kevin Moran
	 * Description: This method updates an Android project which can be built with ant to a target 
	 * Android version. The androidTarget string must be in the form "android-19". To get a list of 
	 * installed targets on a given machine you can run "android list targets".  This command should 
	 * be run before building or cleaning in order to initialize the project with local androidSDKPath
	 * and other environment variables.
	 * 
	 * @param projectCommits
	 * @param cloneLocation
	 * @param androidSDKPath
	 * @param androidTarget
	 */
	public static void updateProjects( String projectLocation, String androidSDKPath, String androidTarget){
		
		String updateProject = androidSDKPath + File.separator + "tools" + File.separator + "android update project -p " + projectLocation  + " -t " + androidTarget;
		System.out.println(executeCommand(updateProject));
		
	}
	
	/**
	 * @author Kevin Moran
	 * Description: Uses the ant build system to clean an android project (e.g. remove previous
	 * files generated by building the project.  It is recommended to run this method before 
	 * building any project using ant.
	 * 
	 * @param projectLocation
	 * @param antPath
	 */
	public static void cleanProjects(String projectLocation, String antPath){
		
			String cleanProject = "cd " + projectLocation + "; " + antPath + File.separator + "bin/ant clean";
			System.out.println(executeCommand(cleanProject));
		
	}
	
	/**
	 * @author Kevin Moran
	 * Description: builds a target android project in debug mode using ant.
	 * @param projectLocation
	 * @param antPath
	 */
	public static void compileProjects(String projectLocation, String antPath){
		
			String cleanProject = "cd " + projectLocation + "; " + antPath + File.separator + "bin/ant debug";
			System.out.println(executeCommand(cleanProject));
		
	}
	
	/**
	 * @author Kevin Moran
	 * Description: builds a project using the gradle build system.
	 * @param projectLocation
	 * @param gradlePath
	 */
	public static void buildWithGradle(String projectLocation, String gradlePath){
		
			String buildProject = "cd " + projectLocation + File.separator + "; " + gradlePath + File.separator + "gradle build";
			System.out.println(executeCommand(buildProject));
		
	}
	
	public static String executeCommand(String command) {
        String output = "";
        Process proc;
        Runtime rt;
        try {
            BufferedReader stdOutput;

            rt = Runtime.getRuntime();
            proc = rt.exec(new String[] { "/bin/sh", "-c", command });
            InputStreamReader procReader = new InputStreamReader(proc.getInputStream());
            InputStreamReader errorReader = null;
            stdOutput = new BufferedReader(procReader);
            output = getConsoleString(stdOutput, output);
            if (output.trim().isEmpty()) {
                errorReader = new InputStreamReader(proc.getErrorStream());
                stdOutput = new BufferedReader(errorReader);
                output = getConsoleString(stdOutput, output);
                errorReader.close();
            }
            proc.waitFor();

            stdOutput.close();
            if (procReader != null) {
                procReader.close();
            }
        } catch (IOException ex) {
            System.out.println("IOException!!");
        } catch (InterruptedException ex) {
        	System.out.println("Interrupted Exception!!");
        }
        // System.out.println(command);
        return output.trim();
    }

	 private static String getConsoleString(BufferedReader stdOutput, String output) throws IOException {
	        String line;
	        while ((line = stdOutput.readLine()) != null) {
	            output += line + "\n";
	        }
	        return output;
	    }
	
}
