/*
 *
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 *
 */

/*
 * This file is auto-generated by Qpid Gentools v.0.1 - do not modify.
 * Supported AMQP version:
 *   0-91
 */

package org.apache.qpid.server.protocol.v0_8.transport;

import org.apache.qpid.server.QpidException;
import org.apache.qpid.server.bytebuffer.QpidByteBuffer;
import org.apache.qpid.server.protocol.ProtocolVersion;
import org.apache.qpid.server.protocol.v0_8.AMQShortString;

public class ConnectionCloseBody extends AMQMethodBodyImpl implements EncodableAMQDataBlock, AMQMethodBody
{

    public static final int CLASS_ID =  10;

    private final int _ownMethodId;
    // Fields declared in specification
    private final int _replyCode; // [replyCode]
    private final AMQShortString _replyText; // [replyText]
    private final int _classId; // [classId]
    private final int _methodId; // [methodId]

    public ConnectionCloseBody(ProtocolVersion protocolVersion,
                               int replyCode,
                               AMQShortString replyText,
                               int classId,
                               int methodId
                              )
    {
        _ownMethodId = ProtocolVersion.v0_8.equals(protocolVersion) ? 60 : 50;
        _replyCode = replyCode;
        _replyText = replyText;
        _classId = classId;
        _methodId = methodId;
    }

    @Override
    public int getClazz()
    {
        return CLASS_ID;
    }

    @Override
    public int getMethod()
    {
        return _ownMethodId;
    }

    public final int getReplyCode()
    {
        return _replyCode;
    }
    public final AMQShortString getReplyText()
    {
        return _replyText;
    }
    public final int getClassId()
    {
        return _classId;
    }
    public final int getMethodId()
    {
        return _methodId;
    }

    @Override
    protected int getBodySize()
    {
        int size = 6;
        size += getSizeOf( _replyText );
        return size;
    }

    @Override
    public void writeMethodPayload(QpidByteBuffer buffer)
    {
        writeUnsignedShort( buffer, _replyCode );
        writeAMQShortString( buffer, _replyText );
        writeUnsignedShort( buffer, _classId );
        writeUnsignedShort( buffer, _methodId );
    }

    @Override
    public boolean execute(MethodDispatcher dispatcher, int channelId) throws QpidException
	{
    return dispatcher.dispatchConnectionClose(this, channelId);
	}

    @Override
    public String toString()
    {
        StringBuilder buf = new StringBuilder("[ConnectionCloseBodyImpl: ");
        buf.append( "replyCode=" );
        buf.append(  getReplyCode() );
        buf.append( ", " );
        buf.append( "replyText=" );
        buf.append(  getReplyText() );
        buf.append( ", " );
        buf.append( "classId=" );
        buf.append(  getClassId() );
        buf.append( ", " );
        buf.append( "methodId=" );
        buf.append(  getMethodId() );
        buf.append("]");
        return buf.toString();
    }

    public static void process(final QpidByteBuffer buffer, final MethodProcessor dispatcher)
    {
        int replyCode = buffer.getUnsignedShort();
        AMQShortString replyText = AMQShortString.readAMQShortString(buffer);
        int classId = buffer.getUnsignedShort();
        int methodId = buffer.getUnsignedShort();
        dispatcher.receiveConnectionClose(replyCode, replyText, classId, methodId);
    }
}
